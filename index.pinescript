//@version=5
indicator("FVG [bpuyol]", overlay=true, max_boxes_count=500, max_labels_count=500)

//------------------------------------------------------------------------------
// Settings
//------------------------------------------------------------------------------
GRP1 = "Settings"
enable_london = input(true, title="Enable London Session", group=GRP1)
londonTime = input.session(title='London', defval='0200-0305', group=GRP1)
enable_new_york = input(true, title="Enable New York Session", group=GRP1)
newYorkTime = input.session(title='New York', defval='1100-1205', group=GRP1)

// Activación separada de FVG y entradas
enable_fvg = input(true, title="Enable Fair Value Gaps (FVG)", group=GRP1)

// Determinar si el tiempo actual está dentro de los rangos de tiempo especificados
is_in_london_time = enable_london and not na(time(timeframe.period, londonTime))
is_in_new_york_time = enable_new_york and not na(time(timeframe.period, newYorkTime))
is_in_time_range = is_in_london_time or is_in_new_york_time

// Fair Value Gaps
show_fvg = enable_fvg and is_in_time_range
bull_fvg_css = input.color(#2157f3, title='', inline='fvg_css', group='Fair Value Gaps')
bear_fvg_css = input.color(#ff1100, title='', inline='fvg_css', group='Fair Value Gaps')
fvg_extend = input.int(0, title='Extend FVG', minval=0, group='Fair Value Gaps')

//------------------------------------------------------------------------------
// Functions
//------------------------------------------------------------------------------
n = bar_index
atr = ta.atr(200)

// Arrays to store references to graphical elements
var bull_fvg_boxes = array.new_box(0)
var bull_fvg_lines = array.new_line(0)
var bull_fvg_labels = array.new_label(0)
var bear_fvg_boxes = array.new_box(0)
var bear_fvg_lines = array.new_line(0)
var bear_fvg_labels = array.new_label(0)

// Detect imbalance and return count over time
imbalance_detection(show, top, btm, condition) =>
    var is_width = true
    var count = 0

    dist = top - btm

    // Default method and width
    is_width := dist > 0

    is_true = show and condition and is_width
    count += is_true ? 1 : 0
   
    [is_true, count]

// Detect if bullish imbalance is filled and return count over time
bull_filled(condition, btm) =>
    var btms = array.new_float(0)
    var count = 0

    if condition
        array.unshift(btms, btm)
   
    size = array.size(btms)

    for i = (size > 0 ? size - 1 : na) to 0
        value = array.get(btms, i)

        if low < value
            array.remove(btms, i)      
            count += 1

    count

// Detect if bearish imbalance is filled and return count over time
bear_filled(condition, top) =>
    var tops = array.new_float(0)
    var count = 0
   
    if condition
        array.unshift(tops, top)
   
    size = array.size(tops)
   
    for i = (size > 0 ? size - 1 : na) to 0
        value = array.get(tops, i)

        if high > value
            array.remove(tops, i)      
            count += 1

    count

//------------------------------------------------------------------------------
// Fair Value Gaps
//------------------------------------------------------------------------------
// Bullish
[bull_fvg, bull_fvg_count] = imbalance_detection(
  show_fvg,
  low,
  high[2],
  low > high[2] and close[1] > high[2])

bull_fvg_filled = bull_filled(bull_fvg, high[2])

// Bearish
[bear_fvg, bear_fvg_count] = imbalance_detection(
  show_fvg,
  low[2],
  high,
  high < low[2] and close[1] < low[2])

bear_fvg_filled = bear_filled(bear_fvg, low[2])

if bull_fvg
    avg = math.avg(low, high[2])
   
    new_box = box.new(n - 2, low, n + fvg_extend, high[2], border_color=na, bgcolor=color.new(bull_fvg_css, 80))
    array.push(bull_fvg_boxes, new_box)
   
    new_line = line.new(n - 2, avg, n + fvg_extend, avg, color=bull_fvg_css)
    array.push(bull_fvg_lines, new_line)

if bear_fvg
    avg = math.avg(low[2], high)

    new_box = box.new(n - 2, low[2], n + fvg_extend, high, border_color=na, bgcolor=color.new(bear_fvg_css, 80))
    array.push(bear_fvg_boxes, new_box)
   
    new_line = line.new(n - 2, avg, n + fvg_extend, avg, color=bear_fvg_css)
    array.push(bear_fvg_lines, new_line)
